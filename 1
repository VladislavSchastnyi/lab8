#include <iostream>
#include <boost/thread.hpp>
#include <boost/bind.hpp>
#include <boost/asio.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/enable_shared_from_this.hpp>

using namespace std; 
using namespace boost::asio;

/*Имя пользователя по умолчанию*/
constexpr auto user_name_def = "Nikolay";
/*Команда login*/
constexpr auto cmd_login="login ";
/*Ответ на команду login*/
constexpr auto cmd_login_Ok = "login Ok";
/*Команда clients*/
constexpr auto cmd_clients = "clients";
/*Команда ping*/
constexpr auto cmd_ping = "ping";
/*Ответ на команду ping*/
constexpr auto cmd_ping_Ok = "ping Ok";

/*Экземпляр io_service для общения с сервисом ввода/вывода операционной системы*/
boost::asio::io_service service;

/*Порт для ожидания подключения*/
constexpr auto server_connect_port = 8001;
/*ip-адрес сервера*/
constexpr auto server_address = "127.0.0.1";

/** simple connection to server:
	- logs in just with username (no password)
	- all connections are initiated by the client: client asks, server answers
	- server disconnects any client that hasn't pinged for 5 seconds
	Possible requests:
	- gets a list of all connected clients
	- ping: the server answers either with "ping ok" or "ping client_list_changed"
*/
struct talk_to_svr {
	talk_to_svr(const std::string & username)
		: sock_(service), started_(true), username_(username) {}
	void connect(ip::tcp::endpoint ep) {
		sock_.connect(ep);
	}
	void loop() {
		// read answer to our login
		write("login " + username_ + "\n");
		read_answer();
		while (started_) {
			write_request();
			read_answer();
			int millis = rand() % 7000;
			std::cout << username_ << " postpone ping "
				<< millis << " ms" << std::endl;
			boost::this_thread::sleep(boost::posix_time::millisec(millis));
		}
	}
	std::string username() const { return username_; }
private:
	void write_request() {
		write("ping\n");
	}
	void read_answer() {
		already_read_ = 0;
		read(sock_, buffer(buff_),
			boost::bind(&talk_to_svr::read_complete, this, _1, _2));
		process_msg();
	}
	void process_msg() {
		std::string msg(buff_, already_read_);
		if (msg.find("login ") == 0) on_login();
		else if (msg.find("ping") == 0) on_ping(msg);
		else if (msg.find("clients ") == 0) on_clients(msg);
		else std::cerr << "invalid msg " << msg << std::endl;
	}

	void on_login() {
		std::cout << username_ << " logged in" << std::endl;
		do_ask_clients();
	}
	void on_ping(const std::string & msg) {
		std::istringstream in(msg);
		std::string answer;
		in >> answer >> answer;
		if (answer == "client_list_changed")
			do_ask_clients();
	}
	void on_clients(const std::string & msg) {
		std::string clients = msg.substr(8);
		std::cout << username_ << ", new client list:" << clients;
	}
	void do_ask_clients() {
		write("ask_clients\n");
		read_answer();
	}

	void write(const std::string & msg) {
		sock_.write_some(buffer(msg));
	}
	size_t read_complete(const boost::system::error_code & err, size_t bytes) {
		if (err) return 0;
		already_read_ = bytes;
		bool found = std::find(buff_, buff_ + bytes, '\n') < buff_ + bytes;
		// we read one-by-one until we get to enter, no buffering
		return found ? 0 : 1;
	}

private:
	ip::tcp::socket sock_;
	enum { max_msg = 1024 };
	int already_read_;
	char buff_[max_msg];
	bool started_;
	std::string username_;
};

ip::tcp::endpoint ep(ip::address::from_string("127.0.0.1"), 8001);
void run_client(const std::string & client_name) {
	talk_to_svr client(client_name);
	try {
		client.connect(ep);
		client.loop();
	}
	catch (boost::system::system_error & err) {
		std::cout << "client terminated " << client.username()
			<< ": " << err.what() << std::endl;
	}
}

/*Ввод имени в командной строке*/
int  main(int argc, char* argv[]) {
	std::string username;
	boost::system::error_code ec;

	//Проверка количества входных параметров
	if (argc > 2) {
		std::cout << "Invalid input params" << endl;
		return 1;
	}

	//Обработка первого входного параметра, если он есть
	if ((argc == 2)) {
		username = argv[1];
	}
	else {
		std::srand((unsigned int)std::time(nullptr));
		username = user_name_def;
		username.append(std::to_string(rand()));
	}

	//Добавление завершающего символа в имя пользователя
	//username.append(1, '\n');
	
	std::cout << "User name - " << username << std::endl;

	//Создание адреса и порта
	ip::tcp::endpoint ep(ip::address::from_string(server_address), server_connect_port);

	while (true) {
		//Создание сокета
		ip::tcp::socket socket(service);

		socket.connect(ep, ec);
		if(!ec){
			std::cout << "Successfully connect to server." << endl;

			//Строка для посыла команды login на сервер
			string login_str(cmd_login);

			//Добавление имени пользователя в строку для посыла команды login на сервер
			login_str.append(username);

			//Посыл строки с командой login на сервер
			socket.write_some(buffer(login_str + '\n'), ec);
			cout << ec << endl;
			if (!ec) {
				//Буфер для получения ответа от сервера 
				char data[512];
/*				string clients_str(cmd_clients);
				string ping_str(cmd_ping);
				cout << clients_str << endl;
				std::this_thread::sleep_for(std::chrono::milliseconds{ 100 });
				socket.write_some(buffer(clients_str + '\n'), ec);
				cout << ec << endl;
				cout << ping_str << endl;
				std::this_thread::sleep_for(std::chrono::milliseconds{ 100 });
				socket.write_some(buffer(ping_str + '\n'), ec);
				cout << ec << endl;
				*/
				//Чтение ответа сервера
				size_t read_server_data_len=socket.read_some(buffer(data), ec);
				if (!ec) {
					//Поиск '\n'
					if (int answer_len=(std::find(data, data + read_server_data_len, '\n') - (data)) != (strlen(cmd_login_Ok) + 1)) {
						//Проверка ответа
						string login_answer_str(data, strlen(cmd_login_Ok));
						if (login_answer_str.find(cmd_login_Ok) == 0) {
							//Запрос списка клиентов

							while (true) {
								//Засыпание на случайный интервал времени
								int delay = ((rand() % 6) + 1) * 1000;
								cout << "delay" << delay << endl;
								std::this_thread::sleep_for(std::chrono::milliseconds{ delay });
								//Посыл команды ping
								string ping_str(cmd_ping);
								socket.write_some(buffer(ping_str + '\n'), ec);
								if (!ec) {
									//Чтение ответа сервера
									read_server_data_len = socket.read_some(buffer(data), ec);
									//Поиск '\n'
									if (int answer_len = (std::find(data, data + read_server_data_len, '\n') - (data)) != strlen(cmd_ping_Ok)) {
										//Проверка ответа
										string ping_answer_str(data, answer_len);
										if (ping_answer_str.find(cmd_ping_Ok) != 0) {
											break;
										}
									}
								}
								else {
									std::cout << "Error " << ec << " get answer 'ping' from server" << endl;
									break;
								}
							}
						}
						else {
							std::cout << "Invalid answer 'login' from server" << endl;
							break;
						}
					}
					else {
						std::cout << "Invalid format answer 'login' from server" << endl;
						break;
					}
				}
				else {
					std::cout << "Error " << ec << " get answer 'login' from server" << endl;
					break;
				}
				break;
			}
			else {
				std::cout << "Error " << ec << " login to server" << endl;
				break;
			}
		}
		else {
			std::cout << "Error " << ec << " connect to server" << endl;
			break;
		}
	}

	return 0;
}
